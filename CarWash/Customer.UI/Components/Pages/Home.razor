@page "/"
@using System.Diagnostics
@rendermode InteractiveServer
@inject BookingService bookingService
<PageTitle>Home</PageTitle>

<h1>Välkommen!</h1>

<!-- Service Types Section -->
<div class="card mb-4">
    <div class="card-body">
        <h5 class="card-title mb-3">Tillgängliga tvätt alternativ</h5>

        @if (serviceTypes == null)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Laddar...</span>
                </div>
            </div>
        }

        else if (serviceTypes.Any())
        {
            <div class="row">
                @foreach (var service in serviceTypes)
                {
                    <div class="col-12 col-sm-6 col-md-4 mb-3">
                        <div class="card h-100 @(selectedservice?.Id == service.Id ? "border-primary" : "")"
                             style="@(selectedservice?.Id == service.Id ? "border-width: 2px;" : "")">
                            <div class="card-body d-flex flex-column">
                                <h6 class="card-title">@service.Name</h6>
                                <p class="card-text text-muted mb-2">@service.Description</p>
                                <h6 class="text-primary mb-3">@service.Price kr</h6>
                                <div class="mt-auto">
                                    <button class="btn w-100 @(selectedservice?.Id == service.Id ? "btn-primary" : "btn-outline-primary")"
                                            @onclick="() => SelectService(service)">
                                        @(selectedservice?.Id == service.Id ? "Vald" : "Välj Service")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-warning" role="alert">
                Inga tvätt alternativ tillgängligt
            </div>
        }
    </div>
</div>

<!-- Time Slots Section -->
<div class="card mb-4">
    <div class="card-body">
        <h5 class="card-title mb-3">Tillgängliga tider</h5>

        @if (timeSlots == null)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (timeSlots.Any())
        {
            @foreach (var dateGroup in timeSlots.Where(ts => ts != null && ts.IsAvailable).GroupBy(ts => ts.AppointmentDate.Date))
            {
                <h6 class="mb-2">@dateGroup.Key.ToString("dddd, MMMM dd")</h6>
                <div class="row mb-4">
                    @foreach (var slot in dateGroup.Where(ts => ts != null).OrderBy(ts => ts.StartTime))
                    {
                        <div class="col-6 col-sm-4 col-md-3 mb-2">
                            <button class="btn @(selectedtimeSlot?.Id == slot.Id ? "btn-primary" : "btn-outline-secondary") w-100"
                                    onclick="@(() => SelectTimeSlot(slot))">
                                @slot.StartTime.ToString("hh':'mm") - @slot.EndTime.ToString("hh':'mm")
                            </button>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <div class="alert alert-warning" role="alert">
                Inga tider tillgängliga
            </div>
        }
    </div>
</div>

<!-- Success Modal -->
<div class="modal fade @(showSuccessModal ? "show" : "")"
     style="display: @(showSuccessModal ? "block" : "none")"
     tabindex="-1"
     aria-labelledby="successModalLabel"
     aria-hidden="@(!showSuccessModal)">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">
                    <i class="bi bi-check-circle me-2"></i>
                    Bokning Bekräftad!
                </h5>
            </div>
            <div class="modal-body text-center">
                <div class="mb-3">
                    <i class="bi bi-check-circle-fill text-success" style="font-size: 3rem;"></i>
                </div>
                <h4 class="text-success mb-3">Tack för din bokning!</h4>

                @if (lastBookedService != null && lastBookedTimeSlot != null)
                {
                    <div class="card bg-light">
                        <div class="card-body">
                            <h6 class="card-title">Bokningsdetaljer:</h6>
                            <p class="card-text mb-1">
                                <strong>Service:</strong> @lastBookedService.Name
                            </p>
                            <p class="card-text mb-1">
                                <strong>Datum:</strong> @lastBookedTimeSlot.AppointmentDate.ToString("dddd, MMMM dd yyyy")
                            </p>
                            <p class="card-text mb-1">
                                <strong>Tid:</strong> @lastBookedTimeSlot.StartTime.ToString(@"hh\:mm")
                            </p>
                            <p class="card-text mb-0">
                                <strong>Pris:</strong> @lastBookedService.Price kr
                            </p>
                        </div>
                    </div>
                }

                <p class="mt-3 text-muted">
                    Du kommer att få en bekräftelse via e-post.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button"
                        class="btn btn-success"
                        @onclick="CloseSuccessModal">
                    Boka Ny Tid
                </button>
                <button type="button"
                        class="btn btn-outline-secondary"
                        @onclick="CloseSuccessModal">
                    Stäng
                </button>
            </div>
        </div>
    </div>
</div>


<!-- Booking Form appears only when both service and timeslot has been chosen -->
@if (selectedservice != null && selectedtimeSlot != null)
{
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title mb-3">Slutför din bokning</h5>

            <div class="alert alert-info mb-3" role="alert">
                <strong>Vald tvätt typ:</strong> @selectedservice.Name (@selectedservice.Price kr)<br />
                <strong>Vald tid:</strong> @selectedtimeSlot.AppointmentDate.ToString("dddd, MMMM dd") kl @selectedtimeSlot.StartTime.ToString(@"hh\:mm")
            </div>

            <form>
                <div class="row">
                    <div class="col-12 col-md-6 mb-3">
                        <label for="licensePlate" class="form-label">Registreringsnummer</label>
                        <input type="text"
                               class="form-control"
                               id="licensePlate"
                               @bind="licensePlate"
                               required>
                        <div class="invalid-feedback">
                            Registreringsnummer krävs
                        </div>
                    </div>
                    <div class="col-12 col-md-6 mb-3">
                        <label for="email" class="form-label">E-post</label>
                        <input type="email"
                               class="form-control"
                               id="email"
                               @bind="email"
                               required>
                        <div class="invalid-feedback">
                            E-post krävs
                        </div>
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-12">
                        <button type="button"
                                class="btn btn-success me-2"
                                onclick="@CreateBooking">
                            Boka Nu
                        </button>
                        <button type="button"
                                class="btn btn-outline-secondary"
                                onclick="@ClearSelection">
                            Rensa
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
}



@code {
    private List<TimeSlotDTO>? timeSlots;
    private List<ServiceTypeDTO>? serviceTypes;
    private string licensePlate = string.Empty;
    private string email = string.Empty;
    private TimeSlotDTO? selectedtimeSlot;
    private ServiceTypeDTO? selectedservice;
    private string errormessage = string.Empty;

    //fo modal
    private bool showSuccessModal = false;
    private bool isCreatingBooking = false;
    private ServiceTypeDTO? lastBookedService;
    private TimeSlotDTO? lastBookedTimeSlot;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(LoadTimeSlots(), LoadServices());
    }


    private async Task CreateBooking()
    {
        if (string.IsNullOrEmpty(licensePlate) || string.IsNullOrEmpty(email))
        {
            errormessage = "Vänligen fyll i alla obligatoriska fält.";
            return;
        }
        if (selectedservice == null || selectedtimeSlot == null)
        {
            errormessage = "vänligen välj både tvätt och tid";
            return;
        }

        // Clear errors
        errormessage = string.Empty;
        isCreatingBooking = true;
        StateHasChanged();

        try
        {

            var success = await bookingService.CreateBooking(licensePlate, email, selectedservice.Id, selectedtimeSlot.Id);
            if (success == true)
            {


                //for modal
                lastBookedService = selectedservice;
                lastBookedTimeSlot = selectedtimeSlot;

                showSuccessModal = true;

                ClearSelection();

                //refresh timeslots
                await LoadTimeSlots();

            }
            else
            {
                errormessage = "skapandet av bokning misslyckades, försök igen";
            }
        }

        catch(Exception e)
        {
            errormessage = $"Ett fel uppstod {e.Message}";
           
        }
    }

    private async Task LoadTimeSlots()
    {

        timeSlots = await bookingService.GetTimeslots();


    }


    private async Task LoadServices()
    {
        serviceTypes = await bookingService.GetServiceTypes();
    }

    private void SelectService(ServiceTypeDTO serviceType)
    {
        selectedservice = serviceType;
        StateHasChanged();
    }

    private void SelectTimeSlot(TimeSlotDTO timeSlot)
    {
        if (timeSlot != null)
        {
            selectedtimeSlot = timeSlot;
            StateHasChanged();
        }

    }


    private void ClearSelection()
    {
        selectedtimeSlot = null;
        selectedservice = null;
        licensePlate = string.Empty;
        email = string.Empty;
        errormessage = string.Empty;
    }

    private void CloseSuccessModal()
    {
        showSuccessModal = false;
        StateHasChanged();
    }

}
